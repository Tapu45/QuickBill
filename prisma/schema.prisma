// Universal Billing Software - Multi-tenant Prisma Schema
// Generator and Datasource
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// MULTI-TENANCY & USER MANAGEMENT
// ============================================

model Organization {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  gstin       String?  @unique
  stateCode   String?
  logo        String?  // URL to logo
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Subscription details
  subscriptionPlan String @default("basic") // basic, premium, enterprise
  subscriptionEndDate DateTime?
  maxUsers    Int      @default(5)
  maxProducts Int      @default(1000)

  // Relations
  users       User[]
  products    Product[]
  customers   Customer[]
  suppliers   Supplier[]
  purchases   Purchase[]
  sales       Sale[]
  inventory   Inventory[]
  warehouses  Warehouse[]
  taxMasters  TaxMaster[]
  bankAccounts BankAccount[]
  expenses    Expense[]
  invoiceConfig InvoiceConfig?

  purchaseReturns      PurchaseReturn[]
  saleReturns          SaleReturn[]
  quotations           Quotation[]
  stockAdjustments     StockAdjustment[]
  receipts             Receipt[]
  payments             Payment[]
  counters             Counter[]        @relation("OrgCounters")
  auditLogs            AuditLog[]
  stockLedgers    StockLedger[]
  stockTransfers  StockTransfer[]

  stores               Store[]          

  autoCounters         AutoCounter[] 

  @@map("organizations")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  password      String    // Hashed password
  firstName     String
  lastName      String
  phone         String?
  role          UserRole
  image         String?
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Multi-tenancy
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  loginHistory  LoginHistory[]
  salesCreated  Sale[]
  purchasesCreated Purchase[]
  receiptsCreated Receipt[]
  paymentsCreated Payment[]

  stores       UserStore[]
  counters     UserCounter[]

  @@map("users")
}

model LoginHistory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  loginTime DateTime @default(now())
  ipAddress String?
  userAgent String?

  @@map("login_history")
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
  SALESPERSON
}

// ============================================
// MASTER DATA MANAGEMENT
// ============================================

model Product {
  id            String   @id @default(cuid())
  code          String   // Product code
  name          String
  brand         String?
  image         String?
  category      String?
  description   String?
  hsnCode       String
  gstPercentage Float
  unit          String   // pcs, sqft, boxes, kg, etc.
  
  // Rate management
  retailRate    Float
  wholesaleRate Float?
  dealerRate    Float?
  
  // Inventory
  minStockLevel Int      @default(0)
  isActive      Boolean  @default(true)
  
  // Tile specific
  lengthInches  Float?   // For tiles
  widthInches   Float?   // For tiles
  sqftPerBox    Float?   // For tiles
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  inventory      Inventory[]
  purchaseItems  PurchaseItem[]
  saleItems      SaleItem[]
  stockAdjustments StockAdjustment[]
  purchaseReturnItems  PurchaseReturnItem[]
  saleReturnItems      SaleReturnItem[]
  quotationItems       QuotationItem[]
  stockLedgers    StockLedger[]
  stockTransfers  StockTransfer[]

  @@unique([organizationId, code])
  @@map("products")
}

model Customer {
  id            String   @id @default(cuid())
  name          String
  email         String?
  phone         String?
  address       String?
  gstin         String?
  stateCode     String?
  priceCategory PriceCategory @default(RETAIL)
  creditLimit   Float    @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  sales         Sale[]
  receipts      Receipt[]
  quotations    Quotation[]

  @@map("customers")
}

model Supplier {
  id           String   @id @default(cuid())
  name         String
  email        String?
  phone        String?
  address      String?
  gstin        String?
  stateCode    String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  purchases    Purchase[]
  payments     Payment[]

  @@map("suppliers")
}

model TaxMaster {
  id            String   @id @default(cuid())
  hsnCode       String
  gstPercentage Float
  description   String?
  isActive      Boolean  @default(true)

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, hsnCode])
  @@map("tax_masters")
}

enum PriceCategory {
  RETAIL
  WHOLESALE
  DEALER
}

// ============================================
// PURCHASE MANAGEMENT
// ============================================

model Purchase {
  id              String   @id @default(cuid())
  invoiceNumber   String
  supplierInvoiceNumber String?
  purchaseDate    DateTime
  supplierId      String
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  
  // Amounts
  subtotal        Float
  cgst            Float    @default(0)
  sgst            Float    @default(0)
  igst            Float    @default(0)
  freight         Float    @default(0)
  otherCharges    Float    @default(0)
  totalAmount     Float
  
  // Status
  status          PurchaseStatus @default(PENDING)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

   storeId     String
  store       Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  createdById    String
  createdBy      User @relation(fields: [createdById], references: [id])
  items          PurchaseItem[]
  returns        PurchaseReturn[]

  @@unique([organizationId, invoiceNumber])
  @@map("purchases")
}

model PurchaseItem {
  id          String   @id @default(cuid())
  purchaseId  String
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Float
  rate        Float
  amount      Float
  gstAmount   Float
  createdAt   DateTime @default(now())

  @@map("purchase_items")
}

model PurchaseReturn {
  id               String   @id @default(cuid())
  returnNumber     String
  returnDate       DateTime
  purchaseId       String
  purchase         Purchase @relation(fields: [purchaseId], references: [id])
  totalAmount      Float
  reason           String?
  status           ReturnStatus @default(PENDING)
  createdAt        DateTime @default(now())

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  items            PurchaseReturnItem[]

  @@unique([organizationId, returnNumber])
  @@map("purchase_returns")
}

model PurchaseReturnItem {
  id               String        @id @default(cuid())
  returnId         String
  return           PurchaseReturn @relation(fields: [returnId], references: [id], onDelete: Cascade)
  productId        String
  product          Product       @relation(fields: [productId], references: [id])
  quantity         Float
  rate             Float
  amount           Float

  @@map("purchase_return_items")
}

enum PurchaseStatus {
  PENDING
  RECEIVED
  CANCELLED
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
}

// ============================================
// SALES MANAGEMENT
// ============================================

model Sale {
  id              String   @id @default(cuid())
  invoiceNumber   String
  saleDate        DateTime
  customerId      String?
  customer        Customer? @relation(fields: [customerId], references: [id])
  storeId         String
  store           Store    @relation(fields: [storeId], references: [id])
  counterId       String?
  counter         Counter? @relation(fields: [counterId], references: [id])
  
  // For walk-in customers
  customerName    String?
  customerPhone   String?
  customerAddress String?
  
  // Amounts
  subtotal        Float
  discount        Float    @default(0)
  discountType    DiscountType @default(PERCENTAGE)
  cgst            Float    @default(0)
  sgst            Float    @default(0)
  igst            Float    @default(0)
  totalAmount     Float
  
  // Payment
  paymentMethod   PaymentMethod @default(CASH)
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Status
  status          SaleStatus @default(COMPLETED)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  createdById    String
  createdBy      User @relation(fields: [createdById], references: [id])
  items          SaleItem[]
  returns        SaleReturn[]

  @@unique([organizationId, invoiceNumber])
  @@map("sales")
}

model SaleItem {
  id          String   @id @default(cuid())
  saleId      String
  sale        Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Float
  rate        Float
  discount    Float    @default(0)
  amount      Float
  gstAmount   Float
  createdAt   DateTime @default(now())

  @@map("sale_items")
}

model SaleReturn {
  id               String   @id @default(cuid())
  returnNumber     String
  returnDate       DateTime
  saleId           String?
  sale             Sale?    @relation(fields: [saleId], references: [id])
  totalAmount      Float
  reason           String?
  refundMethod     RefundMethod @default(CASH)
  status           ReturnStatus @default(PENDING)
  createdAt        DateTime @default(now())

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  items            SaleReturnItem[]

  @@unique([organizationId, returnNumber])
  @@map("sale_returns")
}

model StockLedger {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  warehouseId   String
  warehouse     Warehouse @relation("WarehouseStockLedger", fields: [warehouseId], references: [id])
  movementType  StockMovementType
  quantity      Float
  referenceId   String?
  referenceType String?
  remarks       String?
  createdAt     DateTime @default(now())

   storeId     String
  store       Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}


enum StockMovementType {
  PURCHASE
  SALE
  ADJUSTMENT
  TRANSFER_IN
  TRANSFER_OUT
  RETURN
}

model StockTransfer {
  id              String   @id @default(cuid())
  productId       String
  product         Product  @relation(fields: [productId], references: [id])
  fromWarehouseId String
  fromWarehouse   Warehouse @relation("FromWarehouse", fields: [fromWarehouseId], references: [id])
  toWarehouseId   String
  toWarehouse     Warehouse @relation("ToWarehouse", fields: [toWarehouseId], references: [id])
  quantity        Float
  transferDate    DateTime @default(now())
  reason          String?
  status          TransferStatus @default(PENDING)
  createdAt       DateTime @default(now())

   storeId     String
  store       Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum TransferStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model SaleReturnItem {
  id               String     @id @default(cuid())
  returnId         String
  return           SaleReturn @relation(fields: [returnId], references: [id], onDelete: Cascade)
  productId        String
  product          Product    @relation(fields: [productId], references: [id])
  quantity         Float
  rate             Float
  amount           Float

  @@map("sale_return_items")
}

model Quotation {
  id              String   @id @default(cuid())
  quotationNumber String
  quotationDate   DateTime
  customerId      String
  customer        Customer @relation(fields: [customerId], references: [id])
  validTill       DateTime
  subtotal        Float
  discount        Float    @default(0)
  totalAmount     Float
  status          QuotationStatus @default(PENDING)
  notes           String?
  createdAt       DateTime @default(now())

   storeId     String
  store       Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  items           QuotationItem[]

  @@unique([organizationId, quotationNumber])
  @@map("quotations")
}

model QuotationItem {
  id           String    @id @default(cuid())
  quotationId  String
  quotation    Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  productId    String
  product      Product   @relation(fields: [productId], references: [id])
  quantity     Float
  rate         Float
  amount       Float

  @@map("quotation_items")
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  CHEQUE
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  OVERDUE
}

enum SaleStatus {
  DRAFT
  COMPLETED
  CANCELLED
}

enum RefundMethod {
  CASH
  CARD
  UPI
  BANK_TRANSFER
}

enum QuotationStatus {
  PENDING
  APPROVED
  REJECTED
  CONVERTED
}

// ============================================
// INVENTORY MANAGEMENT
// ============================================

model Warehouse {
  id          String   @id @default(cuid())
  name        String
  address     String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  storeId    String
  store       Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  inventory   Inventory[]
  stockLedgers   StockLedger[] @relation("WarehouseStockLedger")
  stockTransfersFrom StockTransfer[] @relation("FromWarehouse")
  stockTransfersTo   StockTransfer[] @relation("ToWarehouse")
  stockAdjustments   StockAdjustment[]

  @@map("warehouses")
}

model Inventory {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  warehouseId   String
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id])
  quantity      Float    @default(0)
  reservedQty   Float    @default(0) // Reserved for pending orders
  avgCostPrice  Float    @default(0)
  lastUpdated   DateTime @default(now())

   storeId     String
  store       Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, productId, warehouseId])
  @@map("inventory")
}

model StockAdjustment {
  id                String   @id @default(cuid())
  adjustmentNumber  String
  adjustmentDate    DateTime
  productId         String
  product           Product  @relation(fields: [productId], references: [id])
  warehouseId       String   // <-- Add this line
  warehouse         Warehouse @relation(fields: [warehouseId], references: [id])
  adjustmentType    StockAdjustmentType
  quantity          Float
  reason            String?

   storeId     String
  store       Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, adjustmentNumber])
  @@map("stock_adjustments")
}

enum StockAdjustmentType {
  INCREASE
  DECREASE
  DAMAGE
  THEFT
  FOUND
}

// ============================================
// ACCOUNTS & LEDGER
// ============================================

model BankAccount {
  id              String   @id @default(cuid())
  accountName     String
  accountNumber   String
  bankName        String
  branchName      String?
  ifscCode        String?
  currentBalance  Float    @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  receipts        Receipt[]
  payments        Payment[]
  expenses             Expense[]

  @@map("bank_accounts")
}

model Receipt {
  id              String   @id @default(cuid())
  receiptNumber   String
  receiptDate     DateTime
  customerId      String
  customer        Customer @relation(fields: [customerId], references: [id])
  amount          Float
  paymentMethod   PaymentMethod
  bankAccountId   String?
  bankAccount     BankAccount? @relation(fields: [bankAccountId], references: [id])
  chequeNumber    String?
  chequeDate      DateTime?
  upiReference    String?
  notes           String?
  createdAt       DateTime @default(now())

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  createdById    String
  createdBy      User @relation(fields: [createdById], references: [id])

  @@unique([organizationId, receiptNumber])
  @@map("receipts")
}

model Payment {
  id              String   @id @default(cuid())
  paymentNumber   String
  paymentDate     DateTime
  supplierId      String
  supplier        Supplier @relation(fields: [supplierId], references: [id])
  amount          Float
  paymentMethod   PaymentMethod
  bankAccountId   String?
  bankAccount     BankAccount? @relation(fields: [bankAccountId], references: [id])
  chequeNumber    String?
  chequeDate      DateTime?
  upiReference    String?
  notes           String?
  createdAt       DateTime @default(now())

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  createdById    String
  createdBy      User @relation(fields: [createdById], references: [id])

  @@unique([organizationId, paymentNumber])
  @@map("payments")
}

model Expense {
  id            String   @id @default(cuid())
  expenseNumber String
  expenseDate   DateTime
  category      ExpenseCategory
  description   String
  amount        Float
  paymentMethod PaymentMethod
  bankAccountId String?
  bankAccount   BankAccount? @relation(fields: [bankAccountId], references: [id])
  notes         String?
  createdAt     DateTime @default(now())

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, expenseNumber])
  @@map("expenses")
}

enum ExpenseCategory {
  OFFICE
  ADMIN
  UTILITIES
  TRANSPORT
  MARKETING
  MAINTENANCE
  OTHER
}

// ============================================
// INVOICE CONFIGURATION
// ============================================

model InvoiceConfig {
  id              String   @id @default(cuid())
  companyName     String
  companyAddress  String
  companyPhone    String
  companyEmail    String
  companyGstin    String
  logoUrl         String?
  termsConditions String?
  invoicePrefix   String   @default("INV")
  quotationPrefix String   @default("QUO")
  enableQrCode    Boolean  @default(false)
  enableEInvoice  Boolean  @default(false)
  thermalPrint    Boolean  @default(false)
  printFormat     PrintFormat @default(A4)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Multi-tenancy (One-to-One)
  organizationId String @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invoice_configs")
}

enum PrintFormat {
  A4
  THERMAL_58MM
  THERMAL_80MM
}

// ============================================
// COUNTERS FOR AUTO-NUMBERING
// ============================================

model AutoCounter {
  id             String   @id @default(cuid())
  name           String
  currentValue   Int      @default(0)
  prefix         String   @default("")
  suffix         String   @default("")
  resetPeriod    ResetPeriod @default(YEARLY)
  lastReset      DateTime @default(now())

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
  @@map("counters")
}

enum ResetPeriod {
  NEVER
  YEARLY
  MONTHLY
  DAILY
}

// ============================================
// AUDIT TRAIL
// ============================================

model AuditLog {
  id            String   @id @default(cuid())
  userId        String
  action        String   // CREATE, UPDATE, DELETE
  tableName     String
  recordId      String
  oldValues     Json?
  newValues     Json?
  timestamp     DateTime @default(now())

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Store {
  id          String   @id @default(cuid())
  name        String
  address     String?
  phone       String?
  email       String?
  gstin       String?
  stateCode   String?
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenancy
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  counters      Counter[]      @relation("StoreCounters")
  inventory     Inventory[]
  warehouses    Warehouse[]
  purchases     Purchase[]
  sales         Sale[]
  quotations    Quotation[]
  stockAdjustments  StockAdjustment[]
  stockTransfers    StockTransfer[]
  stockLedgers      StockLedger[]
  users         UserStore[]
}

// Add Counter model for POS terminals within stores
model Counter {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Store relation
  storeId     String
  store       Store    @relation("StoreCounters", fields: [storeId], references: [id], onDelete: Cascade)

  // Organization relation (for OrgCounters)
  organizationId String
  organization   Organization @relation("OrgCounters", fields: [organizationId], references: [id], onDelete: Cascade)

  // Relations
  sales       Sale[]
  users       UserCounter[]
}

// Many-to-many relation between users and stores
model UserStore {
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storeId     String
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  role        StoreRole @default(STAFF)
  isDefault   Boolean  @default(false)
  assignedAt  DateTime @default(now())

  @@id([userId, storeId])
}

// Many-to-many relation between users and counters
model UserCounter {
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  counterId   String
  counter     Counter  @relation(fields: [counterId], references: [id], onDelete: Cascade)
  assignedAt  DateTime @default(now())

  @@id([userId, counterId])
}

enum StoreRole {
  MANAGER
  SUPERVISOR
  STAFF
}